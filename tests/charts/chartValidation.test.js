let testUtils = require('../testUtils.js')

test('should validate published version of a chart', async () => {
  await client.accounts.updateSetting('VALIDATE_DUPLICATE_LABELS', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_OBJECTS_WITHOUT_CATEGORIES', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_UNLABELED_OBJECTS', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_FOCAL_POINT', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_OBJECT_TYPES_PER_CATEGORY', 'WARNING')
  let chartKey = testUtils.getChartKey()
  await testUtils.createErroneousTestChart(chartKey, user.designerKey)
  await client.events.create(chartKey)

  let validationRes = await client.charts.validatePublishedVersion(chartKey)

  let validatorKeys = validationRes.warnings.map(warning => warning.validatorKey)
  expect(validationRes.errors).toEqual([])
  expect(validatorKeys).toContain('VALIDATE_DUPLICATE_LABELS')
  expect(validatorKeys).toContain('VALIDATE_OBJECTS_WITHOUT_CATEGORIES')
  expect(validatorKeys).toContain('VALIDATE_UNLABELED_OBJECTS')
  expect(validatorKeys).toContain('VALIDATE_FOCAL_POINT')
  expect(validatorKeys).toContain('VALIDATE_OBJECT_TYPES_PER_CATEGORY')
})

test('should validate published version of a chart with different validation settings', async () => {
  await client.accounts.updateSetting('VALIDATE_DUPLICATE_LABELS', 'ERROR')
  await client.accounts.updateSetting('VALIDATE_OBJECTS_WITHOUT_CATEGORIES', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_UNLABELED_OBJECTS', 'ERROR')
  await client.accounts.updateSetting('VALIDATE_FOCAL_POINT', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_OBJECT_TYPES_PER_CATEGORY', 'OFF')
  let chartKey = testUtils.getChartKey()
  await testUtils.createErroneousTestChart(chartKey, user.designerKey)

  let validationRes = await client.charts.validatePublishedVersion(chartKey)

  let warningValidatorKeys = validationRes.warnings.map(warning => warning.validatorKey)
  let errorValidatorKeys = validationRes.errors.map(error => error.validatorKey)
  expect(warningValidatorKeys).toContain('VALIDATE_OBJECTS_WITHOUT_CATEGORIES')
  expect(warningValidatorKeys).toContain('VALIDATE_FOCAL_POINT')
  expect(warningValidatorKeys).not.toContain('VALIDATE_OBJECT_TYPES_PER_CATEGORY')
  expect(errorValidatorKeys).toContain('VALIDATE_DUPLICATE_LABELS')
  expect(errorValidatorKeys).toContain('VALIDATE_UNLABELED_OBJECTS')
  expect(errorValidatorKeys).not.toContain('VALIDATE_OBJECT_TYPES_PER_CATEGORY')
})

test('should validate draft version of a chart', async () => {
  await client.accounts.updateSetting('VALIDATE_DUPLICATE_LABELS', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_OBJECTS_WITHOUT_CATEGORIES', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_UNLABELED_OBJECTS', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_FOCAL_POINT', 'WARNING')
  await client.accounts.updateSetting('VALIDATE_OBJECT_TYPES_PER_CATEGORY', 'WARNING')
  let chartKey = testUtils.getChartKey()
  await testUtils.createErroneousTestChart(chartKey, user.designerKey)
  await client.events.create(chartKey)
  await client.charts.update(chartKey, 'New name')

  let validationRes = await client.charts.validateDraftVersion(chartKey)

  let validatorKeys = validationRes.warnings.map(warning => warning.validatorKey)
  expect(validationRes.errors).toEqual([])
  expect(validatorKeys).toContain('VALIDATE_DUPLICATE_LABELS')
  expect(validatorKeys).toContain('VALIDATE_OBJECTS_WITHOUT_CATEGORIES')
  expect(validatorKeys).toContain('VALIDATE_UNLABELED_OBJECTS')
  expect(validatorKeys).toContain('VALIDATE_FOCAL_POINT')
  expect(validatorKeys).toContain('VALIDATE_OBJECT_TYPES_PER_CATEGORY')
})
